name: Build FlashMM Wheels with CUDA

on:
  push:
    # push on github tags that start with "wheel"
    tags:
      - "wheel*"

jobs:

  build_wheels:
    name: Build FlashMM Wheels
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [ubuntu-20.04, windows-latest]
        pyver: ["3.8", "3.9", "3.10", "3.11"]
        cuda: ["11.8.0", "12.1.1"]
        cudaarchlist: ["6.0;6.1;6.2;7.0;7.5;8.0;8.6+PTX", "6.0;6.1;6.2;7.0;7.5;7.0;7.5"]
    defaults:
      run:
        shell: pwsh
    env:
      PYPI_CUDA_VERSION: "12.1.1"  
      CUDA_VERSION: ${{ matrix.cuda }}
      # Do not set archlist for now.
      # CUDA_ARCH_LIST: ${{ matrix.cudaarchlist }}
    
    steps:
      - name: Free Disk Space
        uses: jlumbroso/free-disk-space@v1.3.0
        if: runner.os == 'Linux'
        with:
          tool-cache: false
          android: true
          dotnet: true
          haskell: true
          large-packages: false
          docker-images: true
          swap-storage: false
        
      - uses: actions/checkout@v3

      - uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.pyver }}

      - name: Setup Mamba
        uses: conda-incubator/setup-miniconda@v2.2.0
        with:
          activate-environment: "build"
          python-version: ${{ matrix.pyver }}
          miniforge-variant: Mambaforge
          miniforge-version: latest
          use-mamba: true
          add-pip-as-python-dependency: true
          auto-activate-base: false
          
      - name: Install Dependencies
        run: |
          # Install CUDA toolkit
          mamba install -y 'cuda' -c "nvidia/label/cuda-${env:CUDA_VERSION}"

          # Env variables
          $env:CUDA_PATH = $env:CONDA_PREFIX
          $env:CUDA_HOME = $env:CONDA_PREFIX
          
          # Install torch
          $cudaVersion = $env:CUDA_VERSION.Replace('.', '')
          $cudaVersionPytorch = $cudaVersion.Substring(0, $cudaVersion.Length - 1)
          if ([int]$cudaVersionPytorch -gt 118) { $pytorchVersion = "torch==2.1.0" } else {$pytorchVersion = "torch==2.0.1"}
          python -m pip install --upgrade --no-cache-dir $pytorchVersion+cu$cudaVersionPytorch --index-url https://download.pytorch.org/whl/cu$cudaVersionPytorch
          python -m pip install build setuptools wheel ninja

          # Print version information
          python --version
          python -c "import torch; print('PyTorch:', torch.__version__)"
          python -c "import torch; print('CUDA:', torch.version.cuda)"
          python -c "import os; print('CUDA_HOME:', os.getenv('CUDA_HOME', None))"
          python -c "from torch.utils import cpp_extension; print (cpp_extension.CUDA_HOME)"

      - name: Build Wheel
        run: |
          $env:CUDA_PATH = $env:CONDA_PREFIX
          $env:CUDA_HOME = $env:CONDA_PREFIX

          # Only add +cu118 to wheel if not releasing on PyPi
          if ( $env:CUDA_VERSION -eq $env:PYPI_CUDA_VERSION ){
            $env:PYPI_BUILD = 1
          }

          cd csrc/flashmm
          # build the wheel
          python setup.py sdist bdist_wheel 

          # rename wheel to reflect cuda version and torch version bash: dist/*.whl
          $VERSION_APPENDIX = python -c "import torch; print('-torch' + (torch.__version__.split('+')[0] + '-cu' + torch.version.cuda).replace('.', ''))"
          $originalPattern = '^(flashmm-.*)\.whl$'
          $newPattern = '${1}' + $VERSION_APPENDIX + (($env:CUDA_ARCH_LIST -split ';')[-1] -replace '\+', '') + '.whl'
          # Get the .whl file in the dist directory and rename
          $file = Get-ChildItem -Path dist/*.whl          
          $file | Rename-Item -NewName { $_.Name -replace $originalPattern, $newPattern }          
      
      - name: Release with Notes
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            ./csrc/flashmm/dist/*.whl
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # - name: Upload Assets
      #   uses: shogo82148/actions-upload-release-asset@v1
      #   with:
      #     upload_url: ${{ needs.release.outputs.upload_url }}
      #     asset_path: ./csrc/flashmm/dist/*.whl